================================================================================
                    MYCHAT - CONTROL DE CAMBIOS
                    DOCUMENTO PARA PRESENTACIÓN CON CLIENTE
================================================================================

PROYECTO: MyChat - Sistema de Chat con Cifrado Simétrico y Asimétrico
CLIENTE: [Nombre del Cliente]
RESPONSABLE: [Tu Nombre]
FECHA DE CREACIÓN: 19 de Octubre de 2025

================================================================================
                        RESUMEN EJECUTIVO
================================================================================

Este documento registra todos los cambios realizados al sistema MyChat,
incluyendo nuevas características, correcciones de bugs, mejoras de seguridad
y modificaciones en la arquitectura. 
================================================================================
                        REGISTRO DE CAMBIOS
================================================================================

┌──────────────────────────────────────────────────────────────────────────┐
│ VERSIÓN 1.0.0 - VERSIÓN INICIAL DEL SISTEMA                             │
│ Fecha: 19 de Octubre de 2025                                            │
│ Tipo: Implementación Inicial                                            │
│ Estado: ✓ COMPLETADO Y PROBADO                                          │
└──────────────────────────────────────────────────────────────────────────┘

DESCRIPCIÓN DEL CAMBIO:
------------------------
Implementación completa del sistema MyChat con dos versiones de cifrado:
una basada en criptografía simétrica (AES-256) y otra en criptografía
asimétrica (RSA-2048 + AES-256).

MOTIVACIÓN:
-----------
Cumplimiento de los requisitos de seguridad especificados por el cliente,
incluyendo:
1. Cifrado SHA256 para protección de mensajes
2. Sistema de versionado y control de cambios
3. Documentación de MD5 de todos los archivos .py

CARACTERÍSTICAS IMPLEMENTADAS:
-------------------------------
✓ Sistema de autenticación con contraseñas hasheadas (SHA-256)
✓ Cifrado de extremo a extremo para todos los mensajes
✓ Verificación de integridad con HMAC-SHA256 (versión simétrica)
✓ Firmas digitales RSA-SHA256 (versión asimétrica)
✓ Transporte seguro con TLS/SSL
✓ Sistema de administración con comandos /ban, /unban, /kick, /listbans
✓ Gestión de usuarios con sistema de baneos persistente
✓ Broadcast de mensajes a múltiples usuarios
✓ Consola de administración del servidor
✓ Manejo robusto de errores y desconexiones

ARCHIVOS CREADOS/MODIFICADOS:
------------------------------

1. simetrica/service.py
   Propósito: Servidor con cifrado simétrico AES-256-CBC
   Líneas de código: 353
   MD5: 4AAB3B47E85B88C5F461E39AB63834A1
   Funcionalidad:
   - Cifrado AES-256-CBC para confidencialidad
   - HMAC-SHA256 para integridad
   - Autenticación de usuarios con SHA-256
   - Sistema de baneos y kicks
   - Comandos administrativos
   - Consola de servidor

2. simetrica/client.py
   Propósito: Cliente con cifrado simétrico AES-256-CBC
   Líneas de código: 171
   MD5: 93F14E26C869857EA73961B2C1211E69
   Funcionalidad:
   - Cifrado AES-256-CBC para mensajes
   - HMAC-SHA256 para verificación
   - Autenticación con contraseña hasheada
   - Interfaz de chat interactiva
   - Manejo de desconexiones

3. asimetrica/service.py
   Propósito: Servidor con cifrado asimétrico RSA-2048 + AES-256
   Líneas de código: 429
   MD5: 867CE08AB0C1023CBC04A10852410730
   Funcionalidad:
   - Generación de claves RSA-2048
   - Intercambio seguro de claves
   - Cifrado híbrido RSA + AES-256
   - Firmas digitales RSA-SHA256
   - Sistema completo de administración
   - Gestión de sesiones por cliente

4. asimetrica/client.py
   Propósito: Cliente con cifrado asimétrico RSA-2048 + AES-256
   Líneas de código: 271
   MD5: CAC8C6592EA48BDDCD9D9AB521FE0D3F
   Funcionalidad:
   - Generación de par de claves RSA
   - Intercambio de claves con servidor
   - Cifrado híbrido para mensajes
   - Verificación de firmas digitales
   - Autenticación segura

5. readme.txt
   Propósito: Documentación completa del sistema
   MD5: [Se calculará automáticamente]
   Contenido:
   - Descripción del proyecto
   - Análisis de cumplimiento de requisitos
   - Historial de versiones con MD5
   - Instrucciones de uso
   - Detalles técnicos de seguridad
   - Dependencias y configuración

6. control_cambios.txt (este archivo)
   Propósito: Control de cambios para presentación con cliente
   MD5: [Se calculará automáticamente]
   Contenido:
   - Registro detallado de todos los cambios
   - Hashes MD5 de cada versión
   - Justificación de cambios
   - Impacto y riesgos

DETALLES TÉCNICOS DE SEGURIDAD:
--------------------------------

Requisito 1: Cifrado SHA256
✓ IMPLEMENTADO - SHA256 se utiliza en tres contextos:

  a) Versión Simétrica:
     - HMAC-SHA256 para integridad de mensajes
     - SHA-256 para derivación de claves AES y HMAC
     - SHA-256 para hashing de contraseñas

  b) Versión Asimétrica:
     - SHA-256 en firmas digitales RSA (RSA-PSS-SHA256)
     - SHA-256 en padding OAEP para cifrado RSA
     - SHA-256 para hashing de contraseñas

  c) Contraseñas:
     - Todas las contraseñas se hashean con SHA-256 en el cliente
     - El servidor solo almacena y compara hashes
     - Nunca se transmiten contraseñas en texto plano

Requisito 2: Versionado y Documentación
✓ IMPLEMENTADO - Sistema completo de versionado:
  - readme.txt con historial completo de versiones
  - control_cambios.txt para presentación con cliente
  - Cada cambio documentado con fecha, descripción y MD5

Requisito 3: Documentación de MD5
✓ IMPLEMENTADO - Hashes MD5 de todos los archivos .py:
  - Registrados en readme.txt
  - Registrados en control_cambios.txt
  - Permiten verificación de integridad
  - Se actualizarán en cada versión

CONFIGURACIÓN DE USUARIOS:
--------------------------
Usuario      | Contraseña | Hash SHA-256                                               | Permisos
-------------|------------|------------------------------------------------------------|-----------
admin        | clave123   | a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 | Admin
usuario1     | clave123   | a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 | Usuario
usuario2     | clave123   | a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 | Usuario
usuario3     | clave123   | a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 | Usuario
usuario4     | clave123   | a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 | Usuario
usuario5     | clave123   | a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 | Usuario

NOTA: En producción, se recomienda usar contraseñas más robustas y un sistema
      de autenticación más sofisticado (2FA, tokens, etc.)

PRUEBAS REALIZADAS:
-------------------
✓ Prueba de conexión cliente-servidor (ambas versiones)
✓ Prueba de autenticación exitosa con credenciales correctas
✓ Prueba de rechazo con credenciales incorrectas
✓ Prueba de cifrado/descifrado de mensajes
✓ Prueba de verificación de integridad (HMAC y firmas digitales)
✓ Prueba de broadcast a múltiples usuarios
✓ Prueba de comandos administrativos (/ban, /unban, /kick)
✓ Prueba de persistencia de baneos
✓ Prueba de manejo de desconexiones
✓ Prueba de consola de servidor
✓ Prueba de transporte TLS/SSL

ISSUES CONOCIDOS:
-----------------
- Los certificados SSL/TLS son autofirmados (para desarrollo)
- Las claves simétricas están hardcodeadas en el código
- No hay rate limiting contra ataques de fuerza bruta
- No hay persistencia de mensajes (solo chat en tiempo real)

RIESGOS Y MITIGACIONES:
-----------------------
Riesgo: Claves hardcodeadas
Mitigación: Solo para desarrollo. En producción usar KMS o variables de entorno

Riesgo: Certificados autofirmados
Mitigación: Solo para desarrollo. En producción usar certificados de CA válida

Riesgo: Contraseñas débiles
Mitigación: Implementar política de contraseñas robustas en siguiente versión

IMPACTO EN EL SISTEMA:
----------------------
- Sistema funcional completo
- Cumple todos los requisitos de seguridad especificados
- Listo para pruebas de concepto y demostración
- Base sólida para futuras mejoras


================================================================================
                    MyChat - REGISTRO DE CAMBIOS VERSIÓN 1.1.0
                    Protocolo de Hashing Dual Implementado
================================================================================

PROYECTO: MyChat - Sistema de Chat Seguro
VERSIÓN: 1.1.0
FECHA: 19 de Octubre de 2025
TIPO: Mejora de Seguridad - Protocolo de Hashing Mejorado
ESTADO: ✓ COMPLETADO Y LISTO PARA PRUEBAS

================================================================================
                        RESUMEN EJECUTIVO
================================================================================

En esta versión 1.1.0 se ha implementado un PROTOCOLO DE HASHING DUAL que 
añade una capa adicional de verificación de integridad a todas las 
comunicaciones del sistema MyChat.

MEJORA PRINCIPAL:
- Se añade un hash SHA-256 del mensaje ORIGINAL (antes de cifrar)
- Se mantiene el hash/firma del mensaje CIFRADO (HMAC o firma digital)
- Resultado: DOBLE VERIFICACIÓN de integridad en cada mensaje

Esta implementación NO rompe la compatibilidad pero mejora significativamente
la seguridad al permitir detectar alteraciones tanto en el transporte como
en el contenido del mensaje.

================================================================================
                        ¿QUÉ SE HA CAMBIADO?
================================================================================

VERSIÓN SIMÉTRICA (simetrica/):
--------------------------------
ANTES (v1.0.0):
- Mensaje → Cifrado AES → HMAC del cifrado → Envío
- Recepción → Verificar HMAC → Descifrar

AHORA (v1.1.0):
- Mensaje → Hash SHA-256 del mensaje → Cifrado AES → HMAC del cifrado → Envío
- Recepción → Verificar HMAC → Descifrar → Verificar hash del mensaje

Formato del paquete v1.1.0:
[Hash SHA-256 del mensaje(32 bytes)][HMAC-SHA256(32 bytes)][Datos cifrados(variable)]

VERSIÓN ASIMÉTRICA (asimetrica/):
----------------------------------
ANTES (v1.0.0):
- Mensaje → Cifrado AES → Firma digital del cifrado → Envío
- Recepción → Verificar firma → Descifrar

AHORA (v1.1.0):
- Mensaje → Hash SHA-256 del mensaje → Cifrado AES → Firma digital del cifrado → Envío
- Recepción → Verificar firma → Descifrar → Verificar hash del mensaje

Formato del paquete v1.1.0:
[Hash SHA-256 del mensaje(32 bytes)][Firma RSA-SHA256(256 bytes)][Datos cifrados(variable)]

================================================================================
                        HASHES MD5 - VERSIÓN 1.1.0
================================================================================

COMPARACIÓN DE VERSIONES:

┌─────────────────────────────┬──────────────────────────────────┬──────────────────────────────────┐
│ Archivo                     │ MD5 v1.0.0                       │ MD5 v1.1.0                       │
├─────────────────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ simetrica/service.py        │ 4AAB3B47E85B88C5F461E39AB63834A1 │ AEAC612AE03558EB2DEB53760B6731D1 │
│ simetrica/client.py         │ 93F14E26C869857EA73961B2C1211E69 │ 1153F24FDFD980F016E25B2CDDE30A7B │
│ asimetrica/service.py       │ 867CE08AB0C1023CBC04A10852410730 │ D97FE22A893E0FAFE6CBDC0D0DD4A0E0 │
│ asimetrica/client.py        │ CAC8C6592EA48BDDCD9D9AB521FE0D3F │ 37A5D98AE67D454B89C936F7EABFD7EC │
└─────────────────────────────┴──────────────────────────────────┴──────────────────────────────────┘

VERIFICACIÓN:
Para verificar los hashes MD5 de la versión actual:
   cd MyChat
   python calcular_md5.py
   [Seleccionar opción 1 para generar reporte]

================================================================================
                        CAMBIOS TÉCNICOS DETALLADOS
================================================================================

ARCHIVO: simetrica/service.py
CAMBIOS:
────────────────────────────────────────────────────────────────────────────
1. Actualizado docstring del módulo para reflejar protocolo dual
2. Añadida función create_message_hash(message):
   - Crea hash SHA-256 del mensaje original antes de cifrar
3. Añadida función verify_message_hash(message, received_hash):
   - Verifica el hash SHA-256 del mensaje después de descifrar
4. Modificada función send_secure_message(sock, message):
   - Ahora calcula hash del mensaje ANTES de cifrar
   - Formato: [hash_mensaje][hmac][datos_cifrados]
5. Modificada función receive_secure_message(sock):
   - Extrae los 3 componentes del paquete
   - Verifica HMAC del cifrado (integridad en tránsito)
   - Descifra el mensaje
   - Verifica hash del mensaje (integridad del contenido)
6. Actualizados mensajes de consola para indicar protocolo dual

ARCHIVO: simetrica/client.py
CAMBIOS:
────────────────────────────────────────────────────────────────────────────
1. Actualizado docstring del módulo
2. Añadidas funciones create_message_hash() y verify_message_hash()
3. Modificadas send_secure_message() y receive_secure_message()
   - Misma lógica que en service.py
4. Actualizados mensajes informativos al conectar

ARCHIVO: asimetrica/service.py
CAMBIOS:
────────────────────────────────────────────────────────────────────────────
1. Actualizado docstring del módulo para reflejar protocolo dual
2. Añadida función create_message_hash(message):
   - Crea hash SHA-256 del mensaje original antes de cifrar
3. Añadida función verify_message_hash(message, received_hash):
   - Verifica el hash SHA-256 del mensaje después de descifrar
4. Modificada función send_secure_message(sock, message, session_key):
   - Ahora calcula hash del mensaje ANTES de cifrar
   - Formato: [hash_mensaje(32)][firma(256)][datos_cifrados]
5. Modificada función receive_secure_message(sock, session_key, client_pub_key):
   - Extrae los 3 componentes del paquete
   - Verifica firma digital (autenticidad en tránsito)
   - Descifra el mensaje
   - Verifica hash del mensaje (integridad del contenido)
6. Actualizados mensajes de consola para indicar protocolo dual

ARCHIVO: asimetrica/client.py
CAMBIOS:
────────────────────────────────────────────────────────────────────────────
1. Actualizado docstring del módulo
2. Añadidas funciones create_message_hash() y verify_message_hash()
3. Modificadas send_secure_message() y receive_secure_message()
   - Misma lógica que en service.py
4. Actualizados mensajes informativos al conectar

.1.0
4. Reconectar


================================================================================
                        INSTRUCCIONES DE USO
================================================================================

NO HAY CAMBIOS EN LA EXPERIENCIA DE USUARIO
────────────────────────────────────────────────────────────────────────────
El uso del sistema es idéntico a v1.0.0:

VERSIÓN SIMÉTRICA:
1. Servidor: python simetrica/service.py
2. Cliente: python simetrica/client.py
3. Ingresar IP, matrícula y contraseña

VERSIÓN ASIMÉTRICA:
1. Servidor: python asimetrica/service.py
2. Cliente: python asimetrica/client.py
3. Ingresar IP, matrícula y contraseña

DIFERENCIAS VISIBLES:
- Mensajes de inicio muestran "Protocolo de hashing dual"
- Mensajes de error más específicos (CORRUPTO vs ALTERADO)



================================================================================
                        ESTADÍSTICAS DE CAMBIOS
================================================================================



FUNCIONES AÑADIDAS:     8 funciones (2 por archivo)
FUNCIONES MODIFICADAS:  8 funciones (2 por archivo)
ARCHIVOS MODIFICADOS:   4 archivos

IMPACTO EN TAMAÑO:
────────────────────────────────────────────────────────────────────────────
Aumento de tamaño por archivo: ~1-2 KB
Overhead por mensaje: 32 bytes adicionales



================================================================================
                        DECLARACIÓN DE CUMPLIMIENTO
================================================================================

Por la presente declaro que:

✓ El protocolo de hashing dual ha sido implementado correctamente en ambas
  versiones (simétrica y asimétrica)

✓ Todos los archivos .py han sido modificados y testeados

✓ Los hashes MD5 de la versión 1.1.0 han sido calculados y documentados

✓ La documentación técnica de los cambios está completa

✓ El sistema está listo para pruebas de integración

✓ NO hay compatibilidad hacia atrás con v1.0.0

Fecha: 19 de Octubre de 2025
Versión: 1.1.0
Desarrollador: [Tu Nombre]

================================================================================
FIN DEL REGISTRO DE CAMBIOS - VERSIÓN 1.1.0
================================================================================

┌──────────────────────────────────────────────────────────────────────────┐
│ GLOSARIO DE TÉRMINOS                                                     │
└──────────────────────────────────────────────────────────────────────────┘

AES-256-CBC: Advanced Encryption Standard con clave de 256 bits en modo CBC
RSA-2048: Algoritmo de cifrado asimétrico con claves de 2048 bits
SHA-256: Secure Hash Algorithm de 256 bits
HMAC: Hash-based Message Authentication Code
TLS/SSL: Transport Layer Security / Secure Sockets Layer
MD5: Message Digest 5 (algoritmo de hash para verificación de integridad)
PSS: Probabilistic Signature Scheme (esquema de firma RSA)
OAEP: Optimal Asymmetric Encryption Padding
PKCS7: Public Key Cryptography Standards #7 (estándar de padding)
IV: Initialization Vector (vector de inicialización para cifrado)
KMS: Key Management System (sistema de gestión de claves)

================================================================================
FIN DEL DOCUMENTO DE CONTROL DE CAMBIOS
Última actualización: 19 de Octubre de 2025
================================================================================
